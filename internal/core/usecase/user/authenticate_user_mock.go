// Code generated by MockGen. DO NOT EDIT.
// Source: ./authenticate_user.go

// Package user is a generated GoMock package.
package user

import (
	dto "authentication/internal/core/gateway/dto"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockAuthenticateUser is a mock of AuthenticateUser interface.
type MockAuthenticateUser struct {
	ctrl     *gomock.Controller
	recorder *MockAuthenticateUserMockRecorder
}

// MockAuthenticateUserMockRecorder is the mock recorder for MockAuthenticateUser.
type MockAuthenticateUserMockRecorder struct {
	mock *MockAuthenticateUser
}

// NewMockAuthenticateUser creates a new mock instance.
func NewMockAuthenticateUser(ctrl *gomock.Controller) *MockAuthenticateUser {
	mock := &MockAuthenticateUser{ctrl: ctrl}
	mock.recorder = &MockAuthenticateUserMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuthenticateUser) EXPECT() *MockAuthenticateUserMockRecorder {
	return m.recorder
}

// Execute mocks base method.
func (m *MockAuthenticateUser) Execute(user *dto.UserAuthData) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Execute", user)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Execute indicates an expected call of Execute.
func (mr *MockAuthenticateUserMockRecorder) Execute(user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Execute", reflect.TypeOf((*MockAuthenticateUser)(nil).Execute), user)
}
