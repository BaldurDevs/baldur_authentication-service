// Code generated by MockGen. DO NOT EDIT.
// Source: ./authentication_user_repository.go

// Package mock is a generated GoMock package.
package mock

import (
	dto "authentication/internal/core/gateway/dto"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockAuthenticationUserRepository is a mock of AuthenticationUserRepository interface.
type MockAuthenticationUserRepository struct {
	ctrl     *gomock.Controller
	recorder *MockAuthenticationUserRepositoryMockRecorder
}

// MockAuthenticationUserRepositoryMockRecorder is the mock recorder for MockAuthenticationUserRepository.
type MockAuthenticationUserRepositoryMockRecorder struct {
	mock *MockAuthenticationUserRepository
}

// NewMockAuthenticationUserRepository creates a new mock instance.
func NewMockAuthenticationUserRepository(ctrl *gomock.Controller) *MockAuthenticationUserRepository {
	mock := &MockAuthenticationUserRepository{ctrl: ctrl}
	mock.recorder = &MockAuthenticationUserRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuthenticationUserRepository) EXPECT() *MockAuthenticationUserRepositoryMockRecorder {
	return m.recorder
}

// Execute mocks base method.
func (m *MockAuthenticationUserRepository) Execute(entity *dto.UserAuthData) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Execute", entity)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Execute indicates an expected call of Execute.
func (mr *MockAuthenticationUserRepositoryMockRecorder) Execute(entity interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Execute", reflect.TypeOf((*MockAuthenticationUserRepository)(nil).Execute), entity)
}
